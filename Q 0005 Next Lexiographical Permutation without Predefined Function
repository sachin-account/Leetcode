class Solution 
{
public:
// ex- 1 2 4 3 find next lexiographical permuation of this ANS = 1 3 2 4 
// approach is next permuation will come if we find first dip from RIGHT SIDE
// here travelling from right side 1 2 <-4 <-3 <-   
// we find there is a dip in 2 hence store its index 
// swap it with the next numerical wise greater element afterwards the index of first_dip in our case its 3
// swapping nums become 1 3 4 2 
// now we wiil sort all nums afterwards first_dip index to get next permutaion in lexiographical order

// for case 4 3 2 1 there is no dip so here we need to return 1st permuation which is achived by sorting nums  
 
void nextPermutation(vector<int>& nums) 
{  
   int n = nums.size();
   int first_dip; 
   int flag=0; flag => if ther is no dip ex-4321 then we have to return 1st permutaion which is increasing order 
   for(int i=n-1; i>0; i--)
   {
      if(nums[i-1] < nums[i] )
      {
         first_dip = i-1;
         flag=2;
         break;
      }
   }
   
if(flag)
{
 
   int maxi=INT_MAX,just_nxt_grt;
   for(int j=first_dip+1; j<n; j++)
   {
      if( nums[j] > nums[first_dip] && nums[j] < maxi ) // finding next greater element numerical wise
      {
         just_nxt_grt=j;
         maxi=nums[j];
      }
   }
   
   swap(nums[first_dip], nums[just_nxt_grt]);
   
   sort(nums.begin()+first_dip+1, nums.end());
}
else
{
  sort(nums.begin(), nums.end());
}

}
};
