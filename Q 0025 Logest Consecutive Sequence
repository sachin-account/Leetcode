Given an array of positive integers. Find the length of the longest sub-sequence such that elements in the subsequence are consecutive integers, the consecutive numbers can be in any order.
 

Example 1:

Input:
N = 7
a[] = {2,6,1,9,4,5,3}
Output:
6
Explanation:
The consecutive numbers here
are 1, 2, 3, 4, 5, 6. These 6 
numbers form the longest consecutive
subsquence.
Example 2:

Input:
N = 7
a[] = {1,9,3,10,4,20,2}
Output:
4
Explanation:
1, 2, 3, 4 is the longest
consecutive subsequence.

** The Idea is to traverse all the ele of the array and store in map with mark as present(represented by 1) 
** now traversing ele of map and checking if i stand at 4 is 5 present in map or not if not counter(variable to store the length of consecutive sequence)=1

Array ->       {2,  6,  1,  9,  4,  5,  3}



map(store ele in sorted order)   
->  val key        
     1   1               
     2   1
     3   1
     4   1
     5   1
     6   1
     9   1
         
         
         
class Solution {
public:
    int longestConsecutive(vector<int>& nums)
    {
       map<long long int,int> m;
       int n=nums.size(); 
       
        if(n==0)
           return 0;
        
        for(int i=0;i<n;i++)  
           m[nums[i]]=1;
      
        int counter=1,ans=1;
        for(auto it: m)
        {
            if(m.find(it.first + 1) != m.end()) // the next ele present only then counter++  
               counter++;   
            else
               counter=1;
            
            ans=max(counter,ans);
        }
        return ans;
        
    }
};
