Given an array Arr[] that contains N integers (may be positive, negative or zero). Find the product of the maximum product subarray.

Example 1:

Input:
N = 5
Arr[] = {6, -3, -10, 0, 2}
Output: 180
Explanation: Subarray with maximum product
is [6, -3, -10] which gives product as 180.
Example 2:

Input:
N = 6
Arr[] = {2, 3, 4, 5, -1, 0}
Output: 120
Explanation: Subarray with maximum product
is [2, 3, 4, 5] which gives product as 120.

**** idea is to traverse array from left to right keeping two variables mini and maxi which represents the minimum and maximum product value till the ith index 
of the array. Now, if the ith element of the array is negative that means now the values of mini and maxi will be swapped as value of maxi will become minimum 
by multiplying it with a negative number. Now, compare the minVal and maxVal.

The value of mini and maxi depends on the current index element or the product of the current index element and the previous mini and maxi respectively


Arr[]  =  {6,                  -3,                       -10,       0,      2}
maxi   =   6   6(swaped val)   -3     -18(swaped val)    180        0       2           
mini   =   6   6(swaped val)   -18    -3(swaped val)     -10        0       0        
ans    =   6                    6                        180        180     180        


class Solution{
public:

    long long maxFunc(long long x,long long y)
    {
        if(x >= y)
          return x;
        return y;
    }
	
	long long minFunc(long long x,long long y)
    {
        if(x >= y)
          return y;
        return x;
    }
	
	long long maxProduct(vector<int> a, int n)
	{
	    long  long maxi=a[0];
      long  long mini=a[0];
      long  long res=a[0]; 
        
	  for(int i=1;i<n;i++)
	  {
	       if(a[i] < 0)
	          swap(maxi,mini);
	      
	       maxi=maxFunc(a[i],a[i]*maxi);
	       mini=minFunc(a[i],a[i]*mini);
	       
        res=maxFunc(res,maxi);
	  }

return res;  
}
};
