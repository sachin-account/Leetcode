Given an array arr of size n and an integer X. Find if there's a triplet in the array which sums up to the given integer X.
Example 1:

Input:
n = 6, X = 13
arr[] = [1 4 45 6 10 8]
Output:
1
Explanation:
The triplet {1, 4, 8} in 
the array sums up to 13.
Example 2:

Input:
n = 5, X = 10
arr[] = [1 2 4 3 6]
Output:
1
Explanation:
The triplet {1, 3, 6} in 
the array sums up to 10.

Your Task:
You don't need to read input or print anything. Your task is to complete the function find3Numbers() which takes the array arr[], 
the size of the array (n) and the sum (X) as inputs and returns True if there exists a triplet in the array arr[] which sums up to X and False otherwise.


**** Brute force will be TC-O(n^3)
**** Here instead of finding the 3rd ele linearly i am doning a binary search
**** TC-O(n^2 log n)


****** WITH HELP OF 2 Pointer(2 sum) WE can do it in TC-O(n^2) 


class Solution{
    public:

    int binary_search(int a[],int l,int h,int X)
    {
      if(l<=h)
      { 
        int mid=(l+h)/2;
        
        if( a[mid] == X )
        {
            return 1;
        }
        else if(a[mid] > X)
        {
            return binary_search(a,l,mid-1,X);
        }
        else
        {
            return binary_search(a,mid+1,h,X);
        }
          
      }
            
    return 0;    
    }
    
    bool find3Numbers(int a[], int n, int X)
    {
        sort(a,a+n); 
        
        int i=0,j=0;
        while(i<n)
        {
            j=i+1;
            
            while(j<n)
            {
                int target = X - (a[i]+a[j]);
                if( binary_search(a,j+1,n-1,target) )
                  return true;
                  
            j++;    
            }
            
        i++;    
        }
        
    return false;    
    }

};
