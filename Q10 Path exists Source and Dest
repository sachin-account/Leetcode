class Solution {
public:
    
    bool IsPath(int n,vector<int> adj[],int source,int destination)
    {
        queue<int> q;
    
        int visi[n];
        for(int i=0;i<n;i++)
            visi[i]=0;
        
        // for(int i=0;i<n;i++)
        // {
        //     if(visi[i]==0)
        //     {
                q.push(source);
                visi[source]=1;
                while(!q.empty())
                {
                   for(int j=0;j<adj[q.front()].size();j++)
                   {
                       if(visi[adj[q.front()][j]] == 0)
                       {
                           if( adj[q.front()][j] == destination )
                               return true;
                           
                           q.push(adj[q.front()][j]);
                           visi[adj[q.front()][j]] = 1;
                       }
                       cout<<endl;
                   }
                   q.pop(); 
                }
                
        //     }
        // }
        
      return false;
    }
    
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination)
    {
        if(source == destination )
            return true;
        
        vector<int> adj[n];
        for(int i=0;i<edges.size();i++)
        {
            adj[edges[i][0]].push_back(edges[i][1]);
            adj[edges[i][1]].push_back(edges[i][0]);   
        }
        
       return IsPath(n,adj,source,destination);
    }
};
