// TECH DOSE 

void merge(int l,long long arr[],int h,int mid,long long int *ans)
    {
        int n1=mid-l+1,n2=h-mid;
        int a[n1],b[n2];
        
        for(int i=0;i<n1;i++)
          a[i]=arr[l+i];
          
        for(int i=0;i<n2;i++)
          b[i]=arr[mid+1+i];  
        
        int x=0,y=0,k=l;
        while(x<n1 && y<n2)
        {
            if(a[x]<=b[y])
             arr[k++]=a[x++];
            else
            {
              arr[k++]=b[y++];
              *ans=*ans+(n1-x);// counting inversion at the time of merging array 
            }
        }
        
        while(x<n1)
        {
             arr[k++]=a[x++];
        }
        
        while(y<n2)
        {
             arr[k++]=b[y++];
        }
        
    }
    
    void mergesort(int l,long long arr[],int h,long long int *ans)
    {
        if(l<h)
        {
          int mid = (h-l)/2 + l;
          mergesort(l,arr,mid,ans);
          mergesort(mid+1,arr,h,ans);
          merge(l,arr,h,mid,ans);
        }
        
    }


long long getInversions(long long arr[], int n)
{
   long long int ans=0; 
   mergesort(0,arr,n-1,&ans);
    return ans;
}
