// Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.
class Solution {
public:
    // Boyer Moore Voting Algo 
    
    //Got a observation: the mjority element will be at Max 2 because it should be > floor(N/3) times and if you mod(%)  3 with 
    //any num at max u can get 2 as remainder. else it would have been exceed n.

    vector<int> majorityElement(vector<int>& nums) 
    {
       int num1=-1,num2=-1;
       int count1=0,count2=0;
       
       for(auto it : nums) // imp concept is - if else concept 
       {
           if(it == num1)
             count1++;
           
           else if(it == num2)
             count2++;
           
           else if(count1==0)
           {
               num1=it;
               count1=1;
           }
           
           else if(count2==0)
           {
              count2=1; 
              num2=it;
           }
           
           else
           {   //decrease counter when it(element) is not the num1,num2 and a point comes when counter will become zero and new value is assign in num1,num2     
               //example - [1,1,1,3,3,2,2,2] when second 2nd comes counter of 3->0 and 1->1 then 3rd 2 comes counter of 3 ka toh hat jaye ga 2 ka counter
               //2->1 and 1->1, now num1=1 num2=2  
               count1--;
               count2--;
           }  
           
       }
       vector<int> ans;
        //still we need to know the frequency of the nums1,nums2
        count2=count1=0;
        for(auto it: nums)
        {
            if(it==num1)
               count1++;
            
            if(it==num2)
               count2++;
        }
        
        if(count1 > floor(nums.size()/3))
        ans.push_back(num1);
        
        if(count2 > floor(nums.size()/3) && num1!=num2)
        ans.push_back(num2);
        
    return ans;
    }
};
